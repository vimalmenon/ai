name: Deploy and Release

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      Release:
        description: "Select a Release Type"
        type: choice
        required: true
        default: Patch
        options:
          - Patch
          - Minor
          - Major

permissions:
  contents: write

env:
  DOCKER_REGISTRY: vimalsmenon
  APP_NAME: ai.vimalmenon.com
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  RELEASE_TYPE: Patch

jobs:
  # Single deploy job since we're just deploying
  get-version:
    uses: vimalmenon/git-action-anywhere/.github/workflows/next-version.yml@main
    with:
      release_type: ${{ github.event.inputs.Release }}

  build-deploy-and-release:
    runs-on: ubuntu-latest
    needs: [get-version]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}
      - name: Docker push
        run: |
          docker build --build-arg APP_VERSION=${{ needs.get-version.outputs.release }} -t ${{ env.APP_NAME }}:${{ needs.get-version.outputs.release }} .
          docker tag ${{ env.APP_NAME }}:${{ needs.get-version.outputs.release }} ${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:${{ needs.get-version.outputs.release }}
          docker push ${{ env.DOCKER_REGISTRY }}/${{env.APP_NAME}}:${{ needs.get-version.outputs.release }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ needs.get-version.outputs.release }}
          release_name: Release v${{ needs.get-version.outputs.release }}
          draft: false
          prerelease: false
      - name: echo Release
        run: echo "Release created with tag v${{ needs.get-version.outputs.release  }}"

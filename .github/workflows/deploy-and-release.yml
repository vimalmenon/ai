name: Deploy and Release

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      Release:
        description: "Select a Release Type"
        type: choice
        required: true
        default: Patch
        options:
          - Patch
          - Minor
          - Major

env:
  DOCKER_REGISTRY: vimalsmenon
  RELEASE: 0.0.18
  APP_NAME: ai.vimalmenon.com
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  RELEASE_TYPE: Patch

jobs:
  # Single deploy job since we're just deploying
  Prepare:
    name: Prepare release
    runs-on: ubuntu-latest
    outputs:
      patch: ${{ steps.values.outputs.patch }}
      minor: ${{ steps.values.outputs.minor }}
      major: ${{ steps.values.outputs.major }}
      date: ${{ steps.values.outputs.date }}
      selected: ${{ steps.values.outputs.selected }}
    steps:
      - uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0 # Required due to the weg Git works, without it this action won't be able to find any or the correct tags
      - name: "Get Previous tag"
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 0.0.0 # Optional fallback tag to use when no tag can be found
      - name: "Get next minor version"
        id: semvers
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previoustag.outputs.tag }}
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - name: "Setting values"
        id: values
        run: |
          echo "::set-output name=patch::${{ steps.semvers.outputs.patch }}"
          echo "::set-output name=minor::${{ steps.semvers.outputs.minor }}"
          echo "::set-output name=major::${{ steps.semvers.outputs.major }}"
          echo "::set-output name=date::$(date +'%d-%b-%Y')"
          if [[ ${{github.event.inputs.Release}} == "Patch" ]]; then
            echo "::set-output name=selected::${{ steps.semvers.outputs.patch }}"
          elif [[ ${{github.event.inputs.Release}} == "Minor" ]]; then
            echo "::set-output name=selected::${{ steps.semvers.outputs.minor }}"
          else
            echo "::set-output name=selected::${{ steps.semvers.outputs.major }}"
          fi
  build-deploy-and-release:
    runs-on: ubuntu-latest
    needs: [Prepare]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}
      - name: Docker push
        run: |
          docker build -t ${{ env.APP_NAME }}:${{ env.RELEASE }} .
          docker tag ${{ env.APP_NAME }}:${{ env.RELEASE }} ${{ env.DOCKER_REGISTRY }}/${{ env.APP_NAME }}:${{ env.RELEASE }}
          docker push ${{ env.DOCKER_REGISTRY }}/${{env.APP_NAME}}:${{ env.RELEASE }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ env.RELEASE }}
          release_name: Release v${{ env.RELEASE }}
          draft: false
          prerelease: false
      - name: echo Release
        run: echo "Release created with tag v${{ needs.prepare.outputs.selected  }}"
